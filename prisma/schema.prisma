generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // url      = env("DATABASE_URL")

  url       = env("POSTGRES_PRISMA_URL") //  uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

enum Role {
  USER
  ADMIN
}

enum Day {
  SUN
  MON
  TUE
  WED
  THU
  FRI
  SAT
}

model User {
  id            Int    @id @default(autoincrement())
  name          String
  email         String @unique
  membership_id String @unique

  address String
  id_card String

  password              String
  role                  Role     @default(USER)
  subscribtion_end_date DateTime

  reservations Activity_reservation[]
  practices    User_practices[]
}

model Activity {
  id   Int    @id @default(autoincrement())
  name String

  reservations Activity_reservation[]
  fields       Field[]
}

model Field {
  id   Int    @id @default(autoincrement())
  name String

  activity_id Int
  activity    Activity @relation(fields: [activity_id], references: [id])

  reservations Activity_reservation[]
}

model Activity_reservation {
  id            Int      @id @default(autoincrement())
  date          DateTime @db.Date
  selectedTimes String

  user_id Int
  user    User @relation(fields: [user_id], references: [id])

  activity_id Int
  activity    Activity @relation(fields: [activity_id], references: [id])

  field_id Int
  fields   Field @relation(fields: [field_id], references: [id])
}

model Event {
  id          Int    @id @default(autoincrement())
  title       String
  imageUrl    String
  date        String
  description String
}

model News {
  id          Int    @id @default(autoincrement())
  title       String
  date        String
  imageUrl    String
  description String
}

model Contact_us {
  id           Int    @id @default(autoincrement())
  phone_number String
  email        String
  description  String
}

model Faqs {
  id       Int    @id @default(autoincrement())
  question String
  answer   String
}

model Coach {
  id                  Int                 @id @default(autoincrement())
  name                String
  age                 Int
  years_of_experience Int
  brief               String
  practices           Practice_schedule[]
}

model Sport {
  id        Int                 @id @default(autoincrement())
  name      String
  practices Practice_schedule[]
}

model Practice_schedule {
  id Int @id @default(autoincrement())

  sport_id Int
  sports   Sport @relation(fields: [sport_id], references: [id])

  coach_id Int
  coach    Coach @relation(fields: [coach_id], references: [id])

  from String
  to   String

  price String

  days String

  deadline DateTime @db.Date

  practices User_practices[]
}

model User_practices {
  user    User @relation(fields: [user_id], references: [id])
  user_id Int // relation scalar field (used in the `@relation` attribute above)

  practice_schedule Practice_schedule @relation(fields: [practice_id], references: [id])
  practice_id       Int // relation scalar field (used in the `@relation` attribute above)

  @@id([user_id, practice_id])
}
